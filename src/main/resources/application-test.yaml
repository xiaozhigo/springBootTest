server:
  port: 9090

spring:
  application:
    name: springboottest
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.176.128:3306/test?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
    username: root
    password: 123
    uniqueResourceName: mysqlDataSource
    druid:
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 10
      # 最大连接池连接数量，最大活跃连接数
      max-active: 150
      # 最小连接池连接数量，最小空闲数量
      min-idle: 10
      # 配置获取连接等待超时的时间
      max-wait: 5000
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      # 指定每个连接上PSCache的大小
      # max-pool-prepared-statement-per-connection-size: 20
      # 和上面的等价
      # max-open-prepared-statements:
      # 指定检测连接sql，如果是null，会影响testWhileIdle、testOnBorrow、testOnReturn失效，如果底层代码use-ping-method是true，默认使用ping
      validation-query: SELECT 1
      validation-query-timeout: 500
      # 申请连接时会使用validationQuery检测连接是否有效，true会降低性能，如果是true，并且检测到连接已关闭，会获取其它的可用的连接
      test-on-borrow: false
      # 归还连接时会使用validationQuery检测连接是否有效，true会降低性能，如果是true，并且检测到连接已关闭，会获取其它的可用的连接，放回数据库线程池
      test-on-return: false
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果此连接空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 1)配合testWhileIdle=true时使用，如果当前jdbc使用间隔大于timeBetweenEvictionRunsMillis配置的空闲连接过期时间，执行validationQuery检测连接是否有效。
      # 数据库会主动超时并断开连接，因此建议timeBetweenEvictionRunsMillis小于数据库的连接主动断开时间（如mysql的wait_timeout和interactive_timeout）
      # 2)配置间隔多久才进行一次检测，Destroy线程检测需要关闭的空闲连接的时间，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      # max-evictable-idle-time-millis:
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
      # 配置多个英文逗号分隔
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；记录慢SQL
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    oracle:
      driver-class-name: oracle.jdbc.driver.OracleDriver
      url: jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))(CONNECT_DATA =(SERVER = DEDICATED)(SERVICE_NAME = XE)))
      username: wulei
      password: 123
      dbcp2:
        max-idle: 10
        max-wait-millis: 10000
        min-idle: 5
        initial-size: 5
        uniqueResourceName: oracleDataSource
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
#最大连接数
http:
  maxTotal: 1000
  #并发数
  defaultMaxPerRoute: 2000
  #创建连接的最长时间
  connectTimeout:  80000
  #从连接池中获取到连接的最长时间
  connectionRequestTimeout: 10000
  #数据传输的最长时间
  socketTimeout:  200000
  #提交请求前测试连接是否可用
  staleConnectionCheckEnabled:  true
person:
  my_name: hehe
# 打印sql
logging:
  config: classpath:logback-spring.xml
  level:
    com:
      example:
        springboottest:
          dao: info
  path: /java-log
okhttp3:
  #是否启用 okhttp3 默认启用
  enabled: true
  #连接超时时间，单位秒
  connect-timeout: 10
  #读超时时间，单位秒
  read-timeout: 10
  #写超时时间，单位秒
  write-timeout: 10
  #是否启用自动ping 0不使用
  ping-interval: 0
  #是否失败后自动重试
  retry-on-connection-failure: false
management:
  endpoints:
    web:
      exposure:
        #监控所有端点，其中health和status是必须监控的
        include: '*'
        #排除对配置信息的监控，每次浏览这个节点的时候
        exclude: configprops
  endpoint:
    health:
      #显示健康具体信息  默认不会显示详细信息
      show-details: always
canal:
  destination: example
  server: 192.168.176.128:11111 #canal地址
es:
  hosts: 192.168.176.128,192.168.176.130,192.168.176.131
  port: 9200
  scheme: http

